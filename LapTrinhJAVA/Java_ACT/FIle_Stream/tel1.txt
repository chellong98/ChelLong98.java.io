	 public static void main(String[] args) {
		 Cat c = new Cat();
		 System.out.println(c.health);
		 Dog d = new Dog();
		 System.out.println(d.health);
	 }  
}
 

When running the Test class, it will print "100" and "100" to the console, because both, Cat and Dog inherited the "health" from Animal class.

Upcasting and downcasting

First, you must understand, that by casting you are not actually changing the object itself, you are just labeling it differently. 
For example, if you create a Cat and upcast it to Animal, then the object doesn't stop from being a Cat. It's still a Cat, but it's just treated as any other Animal and it's Cat properties are hidden until it's downcasted to a Cat again. 
Let's look at object's code before and after upcasting:
Code:
    Cat c = new Cat();
    System.out.println(c);
    Mammal m = c; // upcasting
    System.out.println(m);
    
    /*
    This printed:
        Cat@a90653
        Cat@a90653
    */
As you can see, Cat is still exactly the same Cat after upcasting, it didn't change to 
